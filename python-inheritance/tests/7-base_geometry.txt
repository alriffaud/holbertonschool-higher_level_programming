======================
Using ``BaseGeometry``
======================

First we import ``BaseGeometry`` class from the ``7-base_geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Test Cases:

area Method
===========
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.area(5)
Traceback (most recent call last):
...
TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given


integer_validator Method
========================

Integer Values
==============
>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)


Not Integer Values
==================
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("width", 1.2)
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer

>>> bg.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
...
TypeError: complex must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer

>>> bg.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: list must be an integer

>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
...
TypeError: dict must be an integer

>>> bg.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
...
TypeError: set must be an integer

>>> bg.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
...
TypeError: frozenset must be an integer

>>> bg.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
...
TypeError: bytes must be an integer

>>> bg.integer_validator("bytearrays", bytearray(b"bytes"))
Traceback (most recent call last):
...
TypeError: bytearrays must be an integer

Less than 0 and equal to 0
==========================
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0


Empty Argument
==============
>>> bg.integer_validator("age",)
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator(, 5)
Traceback (most recent call last):
...
SyntaxError: invalid syntax

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'


Empty String
============
>>> bg.integer_validator("", 5)
